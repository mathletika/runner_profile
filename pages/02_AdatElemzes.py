import streamlit as st
import pandas as pd
import numpy as np
from typing import Optional, Tuple

st.set_page_config(
    page_title="Fut√≥ teljes√≠tm√©ny ‚Äì Elemz√©s",
    page_icon="üìä",
    layout="wide"
)

# ====== ST√çLUS ======
st.markdown("""
<style>
.section-title{
  font-weight:700; font-size:1.2rem; margin: 12px 0 8px 0; color: #3d5361;
  border-left: 6px solid #3d5361; padding-left: 10px;
}
.card {
  background: #f6f7f9; border: 1px solid #dfe3e8; border-radius: 14px;
  padding: 16px; box-shadow: 0 1px 3px rgba(0,0,0,0.06);
}
hr.soft{border: none; border-top: 1px solid #eceff1; margin: 1rem 0;}
</style>
""", unsafe_allow_html=True)

st.title("üìä Elemz√©s")

if "idok" not in st.session_state or st.session_state["idok"].empty:
    st.warning("Nincs adat a munkamenetben. Menj vissza az Adatbet√∂lt√©s oldalra!")
    st.page_link("../streamlit_app.py", label="Vissza az Adatbet√∂lt√©shez ‚Üí", icon="‚¨ÖÔ∏è")
    st.stop()

df = st.session_state["idok"].copy()

# ====== SEG√âD: t√°v (m) √©s id≈ë (s) becsl√©s az 'Id≈ë' √©s 'Versenysz√°m' alapj√°n ======
EVENT_TO_METERS = {
    "50 Metres": 50, "55 Metres": 55, "60 Metres": 60, "100 Metres": 100,
    "200 Metres": 200, "300 Metres": 300, "400 Metres": 400,
    "500 Metres": 500, "600 Metres": 600, "800 Metres": 800,
    "1000 Metres": 1000, "1500 Metres": 1500, "Mile": 1609,
    "2000 Metres": 2000, "3000 Metres": 3000, "5000 Metres": 5000,
    "10000 Metres": 10000,
    "5 Kilometres Road": 5000, "10 Kilometres Road": 10000, "15 Kilometres Road": 15000,
    "20 Kilometres Road": 20000, "25 Kilometres Road": 25000, "30 Kilometres Road": 30000,
    "10 Miles": 16093, "Half Marathon": 21097, "Marathon": 42195,
    "100 Kilometres Road": 100000
}

def time_to_seconds(txt: str) -> Optional[float]:
    """
    Elfogad: ss.ss | mm:ss.ss | mm:ss | hh:mm:ss
    (A WA-projekthez illesztve.)
    """
    if not isinstance(txt, str) or not txt.strip():
        return None
    t = txt.strip()
    # hh:mm:ss
    if t.count(":") == 2:
        hh, mm, ss = t.split(":")
        try:
            return int(hh) * 3600 + int(mm) * 60 + float(ss)
        except:
            return None
    # mm:ss(.ss)
    if t.count(":") == 1:
        mm, ss = t.split(":")
        try:
            return int(mm) * 60 + float(ss)
        except:
            return None
    # ss(.ss)
    try:
        return float(t)
    except:
        return None

def add_distance_time_columns(df: pd.DataFrame) -> pd.DataFrame:
    out = df.copy()
    out["T√°v_m"] = out["Versenysz√°m"].map(EVENT_TO_METERS)
    out["Id≈ë_sec"] = out["Id≈ë"].apply(time_to_seconds)
    return out

df_calc = add_distance_time_columns(df)

# ====== TABOK: Critical Speed | √Åtlagos lassul√°s | (K√©s≈ëbb) WA pontok ======
tab1, tab2, tab3 = st.tabs(["Critical Speed (CS)", "√Åtlagos lassul√°s", "WA pontsz√°mok (k√©s≈ëbb)"])

with tab1:
    st.markdown("#### Critical Speed (Monod‚ÄìScherrer)")
    st.caption("A CS-t a d = CS¬∑t + D' line√°ris modellb≈ël becs√ºlj√ºk (t id≈ë [s], d t√°vols√°g [m]).")

    # Alap: csak √©sszer≈± tartom√°ny (>=1500m) ‚Äì cs√∫szka a felhaszn√°l√≥nak
    min_d, max_d = st.slider(
        "Felhaszn√°lt t√°vok (m√©ter) tartom√°nya",
        min_value=400, max_value=42195, value=(1500, 10000), step=100
    )
    use = df_calc.dropna(subset=["T√°v_m", "Id≈ë_sec"])
    use = use[(use["T√°v_m"] >= min_d) & (use["T√°v_m"] <= max_d)]
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.subheader("Adatok a regresszi√≥hoz")
    st.dataframe(use[["Versenysz√°m", "Id≈ë", "T√°v_m", "Id≈ë_sec"]], use_container_width=True, hide_index=True)

    if len(use) >= 2:
        # d = CS * t + D'  => slope = CS
        t = use["Id≈ë_sec"].to_numpy()
        d = use["T√°v_m"].to_numpy()
        A = np.vstack([t, np.ones_like(t)]).T
        # legkisebb n√©gyzetek
        slope, intercept = np.linalg.lstsq(A, d, rcond=None)[0]
        CS = slope  # m/s
        Dprime = intercept  # m

        st.markdown("#### Eredm√©nyek")
        csa, csb, csc = st.columns(3)
        with csa:
            st.metric("Critical Speed (CS)", f"{CS:.2f} m/s", help="m/s")
        with csb:
            st.metric("CS (perc/km)", f"{(1000/CS)/60:.2f} p/km")
        with csc:
            st.metric("D‚Ä≤ (m√©ter)", f"{Dprime:.0f} m")

        # Illeszt√©s-vonal √©s pontok
        import altair as alt
        df_plot = use.copy()
        df_plot["Modell_d"] = CS * df_plot["Id≈ë_sec"] + Dprime

        pts = alt.Chart(df_plot).mark_circle(size=80).encode(
            x=alt.X("Id≈ë_sec:Q", title="Id≈ë [s]"),
            y=alt.Y("T√°v_m:Q", title="T√°vols√°g [m]"),
            tooltip=["Versenysz√°m","Id≈ë","T√°v_m","Id≈ë_sec"]
        )
        line = alt.Chart(pd.DataFrame({
            "Id≈ë_sec": np.linspace(df_plot["Id≈ë_sec"].min()*0.9, df_plot["Id≈ë_sec"].max()*1.1, 100)
        })).transform_calculate(
            T√°v_m=f"{CS}*datum.Id≈ë_sec+{Dprime}"
        ).mark_line().encode(
            x="Id≈ë_sec:Q",
            y=alt.Y("T√°v_m:Q", title="T√°vols√°g [m]")
        )
        st.altair_chart((pts + line).properties(height=360), use_container_width=True)
    else:
        st.info("Legal√°bb 2 adatpont sz√ºks√©ges a CS becsl√©s√©hez.")

    st.markdown('</div>', unsafe_allow_html=True)

with tab2:
    st.markdown("#### √Åtlagos lassul√°s (p√©lda metrika)")
    st.caption("Egyszer≈± p√©lda: a hosszabb t√°vok fajlagos temp√≥ja (p/mp) hogyan romlik a r√∂videbbekhez k√©pest.")
    st.markdown('<div class="card">', unsafe_allow_html=True)

    use = df_calc.dropna(subset=["T√°v_m", "Id≈ë_sec"]).copy()
    use["mp_per_km"] = (use["Id≈ë_sec"] / (use["T√°v_m"]/1000.0))
    use = use.sort_values("T√°v_m")

    if len(use) >= 2:
        # baseline: a legr√∂videbb t√°v mp/km temp√≥ja
        base = use.iloc[0]["mp_per_km"]
        use["lassul√°s_mp_per_km"] = use["mp_per_km"] - base

        st.dataframe(
            use[["Versenysz√°m","Id≈ë","T√°v_m","mp_per_km","lassul√°s_mp_per_km"]],
            use_container_width=True, hide_index=True
        )

        import altair as alt
        chart = alt.Chart(use).mark_bar().encode(
            x=alt.X("Versenysz√°m:N", sort=None, title="Versenysz√°m"),
            y=alt.Y("lassul√°s_mp_per_km:Q", title="Lassul√°s [mp/km] a legr√∂videbb t√°vhoz k√©pest"),
            tooltip=["Versenysz√°m","Id≈ë","T√°v_m","mp_per_km","lassul√°s_mp_per_km"]
        ).properties(height=360)
        st.altair_chart(chart, use_container_width=True)
    else:
        st.info("Legal√°bb 2 adatpont sz√ºks√©ges a lassul√°s becsl√©s√©hez.")

    st.markdown('</div>', unsafe_allow_html=True)

with tab3:
    st.markdown("#### WA pontsz√°mok")
    st.info("Itt fogjuk k√©s≈ëbb bek√∂tni a ‚Äûpontkeres≈ë‚Äù logik√°t √©s megjelen√≠teni a WA pontokat / eloszl√°sokat. "
            "El≈ëbb v√©gleges√≠tj√ºk az adatbet√∂lt√©s √©s sz√°m√≠t√°sok keret√©t.")
